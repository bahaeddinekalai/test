/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dashboardsetting } from "./Dashboardsetting";
import { DashboardsettingCountArgs } from "./DashboardsettingCountArgs";
import { DashboardsettingFindManyArgs } from "./DashboardsettingFindManyArgs";
import { DashboardsettingFindUniqueArgs } from "./DashboardsettingFindUniqueArgs";
import { DeleteDashboardsettingArgs } from "./DeleteDashboardsettingArgs";
import { DashboardsettingService } from "../dashboardsetting.service";
@graphql.Resolver(() => Dashboardsetting)
export class DashboardsettingResolverBase {
  constructor(protected readonly service: DashboardsettingService) {}

  async _dashboardsettingsMeta(
    @graphql.Args() args: DashboardsettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dashboardsetting])
  async dashboardsettings(
    @graphql.Args() args: DashboardsettingFindManyArgs
  ): Promise<Dashboardsetting[]> {
    return this.service.dashboardsettings(args);
  }

  @graphql.Query(() => Dashboardsetting, { nullable: true })
  async dashboardsetting(
    @graphql.Args() args: DashboardsettingFindUniqueArgs
  ): Promise<Dashboardsetting | null> {
    const result = await this.service.dashboardsetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dashboardsetting)
  async deleteDashboardsetting(
    @graphql.Args() args: DeleteDashboardsettingArgs
  ): Promise<Dashboardsetting | null> {
    try {
      return await this.service.deleteDashboardsetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
