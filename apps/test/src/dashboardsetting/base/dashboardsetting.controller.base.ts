/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardsettingService } from "../dashboardsetting.service";
import { DashboardsettingCreateInput } from "./DashboardsettingCreateInput";
import { Dashboardsetting } from "./Dashboardsetting";
import { DashboardsettingFindManyArgs } from "./DashboardsettingFindManyArgs";
import { DashboardsettingWhereUniqueInput } from "./DashboardsettingWhereUniqueInput";
import { DashboardsettingUpdateInput } from "./DashboardsettingUpdateInput";

export class DashboardsettingControllerBase {
  constructor(protected readonly service: DashboardsettingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dashboardsetting })
  @swagger.ApiBody({
    type: DashboardsettingCreateInput,
  })
  async createDashboardsetting(
    @common.Body() data: DashboardsettingCreateInput
  ): Promise<Dashboardsetting> {
    return await this.service.createDashboardsetting({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dashboardsetting] })
  @ApiNestedQuery(DashboardsettingFindManyArgs)
  async dashboardsettings(
    @common.Req() request: Request
  ): Promise<Dashboardsetting[]> {
    const args = plainToClass(DashboardsettingFindManyArgs, request.query);
    return this.service.dashboardsettings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dashboardsetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboardsetting(
    @common.Param() params: DashboardsettingWhereUniqueInput
  ): Promise<Dashboardsetting | null> {
    const result = await this.service.dashboardsetting({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dashboardsetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: DashboardsettingUpdateInput,
  })
  async updateDashboardsetting(
    @common.Param() params: DashboardsettingWhereUniqueInput,
    @common.Body() data: DashboardsettingUpdateInput
  ): Promise<Dashboardsetting | null> {
    try {
      return await this.service.updateDashboardsetting({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dashboardsetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboardsetting(
    @common.Param() params: DashboardsettingWhereUniqueInput
  ): Promise<Dashboardsetting | null> {
    try {
      return await this.service.deleteDashboardsetting({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
