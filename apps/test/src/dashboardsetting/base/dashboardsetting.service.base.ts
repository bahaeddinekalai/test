/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dashboardsetting } from "@prisma/client";

export class DashboardsettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DashboardsettingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsettingCountArgs>
  ): Promise<number> {
    return this.prisma.dashboardsetting.count(args);
  }

  async dashboardsettings<T extends Prisma.DashboardsettingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsettingFindManyArgs>
  ): Promise<Dashboardsetting[]> {
    return this.prisma.dashboardsetting.findMany(args);
  }
  async dashboardsetting<T extends Prisma.DashboardsettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsettingFindUniqueArgs>
  ): Promise<Dashboardsetting | null> {
    return this.prisma.dashboardsetting.findUnique(args);
  }
  async createDashboardsetting<T extends Prisma.DashboardsettingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsettingCreateArgs>
  ): Promise<Dashboardsetting> {
    return this.prisma.dashboardsetting.create<T>(args);
  }
  async updateDashboardsetting<T extends Prisma.DashboardsettingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsettingUpdateArgs>
  ): Promise<Dashboardsetting> {
    return this.prisma.dashboardsetting.update<T>(args);
  }
  async deleteDashboardsetting<T extends Prisma.DashboardsettingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DashboardsettingDeleteArgs>
  ): Promise<Dashboardsetting> {
    return this.prisma.dashboardsetting.delete(args);
  }
}
